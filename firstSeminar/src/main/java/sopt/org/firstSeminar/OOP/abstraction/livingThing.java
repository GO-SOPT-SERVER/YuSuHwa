package sopt.org.firstSeminar.OOP.abstraction;

//인터페이스 : 함수의 껍데기만 있어 해당 함수의 구현을 강제하기위한 목적, 함수의 구현을 강제하기 떄문에 인터페이스를 구현한 객체의 동작을 보장 할 수 있다.
//특징
// 1. 인터페이스가 인터페이스를 상속가능
// 2. 인터페이스여러개를 하나의 클래스가 다중 구현 가능
// 3. 인터페이스 멤버는 반드시 public : 인터페이스는 그 인터페이스를 구현한 클래스를 어떻게 조작할 것인가를 규정-> 그렇기 때문에 외부에서 제어 할 수 있는 가장 개방적인 접근 제어자인 public만을 허용
// 4. (자바 8 이전에는) 인터페이스는 구체적인 로직이나 상태를 가지고 있을 수 없음 : 모든 메소드가 추상 메소드, 상수와 추상메소드만 가짐
//                  -> //그래서 인터페이스를 구현하는 클래스는 같은 기능이여도 중복으로 기능을 구현해야하는 경우 생김
//      (자바 8이후부터는) 인터페이스에 default 메소드가 추가되어 구체적인 로직을 가진 메소드가 가능해짐. -> 그리고 인터페이스를 구현하는 클래스는 default 메소드를 오버라이딩 가능
//                      인터페이스에 static 메소드가 추각되어 구체적인 로직을 구현할 수 있다. 정적 메소드는 오버라이딩이 불가능하다.
// 5. 인터페이스는 인스턴스를 만들수 없지만 인터페이스를 구현한 클래스를 통하면 인스턴스화가 가능 ex. 인터페이스명 ab = new 클래스명( )


//        그럼 인터페이스에 같은 추상메소드가 있을때 확장받은 오버라이딩은 무엇을 오버라이딩?

public interface livingThing {
    public abstract void move();

    public abstract void communicate();

    public abstract void eat();
}
